/*
// Definition for a Node.
class Node {
public:
    int val;
    vector<Node*> neighbors;
    Node() {
        val = 0;
        neighbors = vector<Node*>();
    }
    Node(int _val) {
        val = _val;
        neighbors = vector<Node*>();
    }
    Node(int _val, vector<Node*> _neighbors) {
        val = _val;
        neighbors = _neighbors;
    }
};
*/

class Solution {
public:
    Node* cloneGraph(Node* node) {
        if(node==NULL){
            return node;
        }
        Node* n1 = new Node(node->val, {});
        
        unordered_map <Node*, Node*> m;
        queue <Node*> q;
        q.push(node);
        m[node] = n1;
        
        while(!q.empty()){
            Node *f = q.front();
            q.pop();
            Node* new_node = m[f];
            for (auto nbr: f->neighbors){
                if(m[nbr]){
                    new_node->neighbors.push_back(m[nbr]);
                }
                else{
                    Node* nbr_node = new Node(nbr->val, {});
                    q.push(nbr);
                    m[nbr] = nbr_node;
                    new_node->neighbors.push_back(nbr_node);
                }
            }
        }
        return m[node];
    }
};
